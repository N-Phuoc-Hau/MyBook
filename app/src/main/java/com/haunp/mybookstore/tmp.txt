//        lifecycleScope.launch {
//            val userId = BookStoreManager.idUser
//            val books = viewModel.bookInCart.value
//            if(books!!.isEmpty()){
//                Toast.makeText(context, "Giỏ hàng trống", Toast.LENGTH_SHORT).show()
//                return@launch
//            }
//            val totalAmount = books.sumOf { it.price }
//            val order = OrderEntity(userId = userId!!, orderDate = LocalDate.now().toString(), quantity = books.size, totalAmount = totalAmount)
//            val orderId = orderViewModel.insertOrder(order)
//            orderViewModel.getOrder(userId)
//
//            val orderDetails: List<OrderDetailEntity> = books.map { book ->
//                OrderDetailEntity(
//                    orderId = orderId.toInt(), // ID của đơn hàng
//                    bookId = book.bookId,      // ID của sách
//                    quantity = 1,             // Số lượng mặc định là 1
//                    price = book.price        // Giá sách
//                )
//            }.toList()
//            orderViewModel.insertOrderDetails(orderDetails)
//            Toast.makeText(context, "Đặt hàng thành công", Toast.LENGTH_SHORT).show()
//
//            viewModel.clearCart(userId)
//            (activity as MainActivity).showFragment(SettingFragment())
//        }


try {
//
//                val data = withContext(Dispatchers.IO) { orderApi.createOrder(totalString.toString()) }
//                Log.d("ZaloPay", "Order API response: $data")
//
//                val code = data.getString("return_code")
//                Log.d("ZaloPay", "Return code: $code")
//
//                if (code == "1") {
//                    val token = data.getString("zp_trans_token")
//                    ZaloPaySDK.getInstance().payOrder(
//                        requireActivity(),
//                        token,
//                        "demozpdk://app",
//                        object : PayOrderListener {
//                            override fun onPaymentSucceeded(payUrl: String?, transToken: String?, appTransID: String?) {
//                                paymentResult.value = "Thanh toán thành công"
//                                Log.d("ZaloPay", "Payment succeeded")
//                            }
//
//                            override fun onPaymentCanceled(payUrl: String?, transToken: String?) {
//                                paymentResult.value = "Hủy thanh toán"
//                                Log.d("ZaloPay", "Payment canceled")
//                            }
//
//                            override fun onPaymentError(error: ZaloPayError?, payUrl: String?, transToken: String?) {
//                                paymentResult.value = "Lỗi thanh toán"
//                                Log.e("ZaloPay", "Payment error: $error")
//                            }
//                        }
//                    )
//                    paymentResult.value = "Đang chờ thanh toán..."
//                } else {
//                    Toast.makeText(context, "Không thể tạo đơn hàng", Toast.LENGTH_SHORT).show()
//                }
//            } catch (e: Exception) {
//                paymentResult.value = "Lỗi: ${e.message}"
//                Log.e("ZaloPay", "Exception: ${e.message}")
//            }